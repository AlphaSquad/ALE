#!/bin/bash

# exit script if one command fails
set -o errexit

# exit script if Variable is not set
set -o nounset

INPUT=/bbx/mnt/input/biobox.yaml
OUTPUT=/bbx/mnt/output
METADATA=/bbx/mnt/metadata

# Since this script is the entrypoint to your container
# you can access the task in `docker run task` as the first argument
TASK=$1

# Ensure the biobox.yaml file is valid
validate-biobox-file \
  --input ${INPUT} \
  --schema /schema.yaml \

# Use grep to get $TASK in /Taskfile
CMD=$(egrep ^${TASK}: /Taskfile | cut -f 2 -d ':')
if [[ -z ${CMD} ]]; then
  echo "Abort, no task found for '${TASK}'."
  exit 1
fi

# if /bbx/metadata is mounted create log.txt
if [ -d "$METADATA" ]; then
  CMD="($CMD) >& $METADATA/log.txt"
fi

TMP_DIR="${OUTPUT}"

INPUT_JSON="${TMP_DIR}/biobox.json"

$(yaml2json < ${INPUT} > $INPUT_JSON)

ARGUMENTS=$(jq --raw-output '.arguments' $INPUT_JSON )

#get assembly (fasta)
ASSEMBLY=$( echo $ARGUMENTS | jq --raw-output 'select(has("assemblies")) | .assemblies[].path' |  tr '\n' ' ' | xargs | tr ' ' ',')

#labels
LABELS=$( echo $ARGUMENTS | jq --raw-output 'select(has("assemblies")) | .assemblies[].id' |  tr '\n' ' ' | xargs | tr ' ' ',')

# single or paired
END=$( echo $ARGUMENTS | jq --raw-output 'select(has("reads")) | .reads[].type' |  tr '\n' ' ')

#get reads (gzipped fastq)
READS=$( echo $ARGUMENTS | jq --raw-output 'select(has("reads")) | .reads[].path' |  tr '\n' ' ')

# Evaluation needs fastq reads
gunzip $READS

SINGLE_ENDED=""
PAIRED_1=""
PAIRED_2=""

# sort by single/paired
READ_ARR=( $READS )
I=0
for typ in $END; do
if [ $typ = "single" ]; then
  SINGLE_ENDED=$SINGLE_ENDED${READ_ARR[$I]%.*}$"," #%.* for removing the zip file ending
else # can only be paired then
  perl unshuffle_fastq.pl -f ${READ_ARR[$I]%.*} -o `pwd` -n ${READ_ARR[$I]%.*}
  PAIRED_1=$PAIRED_1${READ_ARR[$I]%.*}$".1,"
  PAIRED_2=$PAIRED_2${READ_ARR[$I]%.*}$".2,"
fi
I=$(expr $I + 1)
done

# remove trailing ,
SINGLE_ENDED=${SINGLE_ENDED%,}
PAIRED_1=${PAIRED_1%,}
PAIRED_2=${PAIRED_2%,}

# convert fastq zipped input to fasta (for building the index)
for seq in $READS; do
  seqtk seq -a $seseq >> out.fasta

# get cache
CACHE=$( echo $ARGUMENTS | jq --raw-output 'select(has("cache")) | .cache ' )

# ALE requires an alignment instead of reads, convert using bowtie2, pipe sam into bam directly for memory reasons
bowtie2-build --quiet out.fasta tmp
bowtie2 -a -x tmp -q -U $SINGLE_ENDED -1 $PAIRED_1 -2 $PAIRED_2 --very-sensitive -a --reorder -S sam_out.sam | samtools view -bS -o library.bam -

# set usable file
SAM="../../library.bam"

#check if cache is defined
if [ ! -z "$CACHE" ]; then
        TMP_DIR=$CACHE
fi

cd ALE/src/ #?
eval ${CMD}

cat << EOF > ${OUTPUT}/biobox.yaml
version: 0.1.0
results:
  - name: everything
    type: txt
    inline: false
    value: ALE_out.txt
    description: everything packed to .txt output
EOF 
